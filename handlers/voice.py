# handlers/voice.py
# –ì–æ–ª–æ—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (Yandex SpeechKit, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π tier)

import os
import tempfile
import requests
from telegram import Update, InputFile
from telegram.ext import MessageHandler, filters, ContextTypes
from quiz_data import get_question
from models import add_score

# ----------------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
YANDEX_STT_KEY = os.getenv("YANDEX_STT_KEY", "")   # –∑–∞–¥–∞–π—Ç–µ –≤ .env
YANDEX_TTS_KEY = os.getenv("YANDEX_TTS_KEY", "")   # –º–æ–∂–Ω–æ —Ç–æ—Ç –∂–µ –∫–ª—é—á
VOICE_LANG = "ru-RU"
VOICE_NAME = "alena"          # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å Yandex

# ----------------- TTS: –±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç –≤–æ–ø—Ä–æ—Å -----------------
async def voice_question(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    cat, question, opts, right, _ = get_question()
    text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}. {question}"

    # 1. —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    tts_url = (
        "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
        f"?text={text}&lang={VOICE_LANG}&voice={VOICE_NAME}&format=oggopus"
    )
    headers = {"Authorization": f"Api-Key {YANDEX_TTS_KEY}"}
    resp = requests.post(tts_url, headers=headers)
    if resp.status_code != 200:
        # fallback ‚Äì —Ç–µ–∫—Å—Ç
        await update.message.reply_text(text + "\n\nüó£ –û—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–º!")
        return

    # 2. –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
        tmp.write(resp.content)
        tmp_path = tmp.name

    # 3. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
    await ctx.bot.send_voice(
        chat_id=update.effective_chat.id,
        voice=open(tmp_path, "rb"),
        caption="üó£ –û—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–º!"
    )
    os.remove(tmp_path)

    # 4. —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    ctx.user_data["voice_right"] = right
    ctx.user_data["voice_opts"] = opts


# ----------------- STT: —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -----------------
async def voice_answer(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å, —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç."""
    voice = update.message.voice
    if not voice:
        return

    # 1. —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await ctx.bot.get_file(voice.file_id)
    with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
        await file.download_to_drive(tmp.name)
        tmp_path = tmp.name

    # 2. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Yandex Speech-to-Text
    stt_url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
    headers = {"Authorization": f"Api-Key {YANDEX_STT_KEY}"}
    with open(tmp_path, "rb") as f:
        resp = requests.post(
            stt_url,
            headers=headers,
            data=f,
            params={"lang": VOICE_LANG}
        )
    os.remove(tmp_path)

    # 3. –ø–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    if resp.status_code == 200:
        recognized = resp.json().get("result", "").strip().lower()
        right = ctx.user_data.get("voice_right", "").lower()
        opts = ctx.user_data.get("voice_opts", [])

        if recognized == right or recognized in [o.lower() for o in opts]:
            add_score(update.effective_user.id, 15)
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +15 –±–∞–ª–ª–æ–≤.")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {right}")
    else:
        await update.message.reply_text("üôÅ –ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# ----------------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ bot.py -----------------
# –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ application.add_handler(...):
# from handlers.voice import voice_question, voice_answer
# application.add_handler(CommandHandler("voice", voice_question))
# application.add_handler(MessageHandler(filters.VOICE, voice_answer))