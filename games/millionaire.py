from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import json, random, pathlib
from db import add_stars, get_stars

router = Router(name="millionaire")
millionaire_router = router

QUESTIONS = json.loads(pathlib.Path("data/questions.json").read_text(encoding="utf8"))
PRIZES = [100, 200, 300, 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 125000, 250000, 500000, 1000000]

class UserState:
    def __init__(self):
        self.q_i = 0
        self.used_50 = False
        self.used_audience = False
        self.used_friend = False

states = {}   # user_id -> UserState

@router.callback_query(F.data == "menu_millionaire")
async def start_game(cb: types.CallbackQuery):
    uid = cb.from_user.id
    states[uid] = UserState()
    await ask_question(cb)

@router.callback_query(F.data.startswith("mil_"))
async def answer(cb: types.CallbackQuery):
    uid = cb.from_user.id
    st = states.get(uid)
    if not st:
        await cb.message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äì –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    _, user_ans, correct = cb.data.split("_")
    if user_ans == correct:
        prize = PRIZES[st.q_i]
        await cb.answer(f"‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à —Å—á—ë—Ç: {prize} ‚≠ê")
        st.q_i += 1
        if st.q_i == 15:
            await add_stars(uid, 1000000)
            await cb.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ú–ò–õ–õ–ò–û–ù–ï–†–û–ú! +1 000 000 ‚≠ê")
            states.pop(uid, None)
        else:
            await ask_question(cb)
    else:
        await cb.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {PRIZES[st.q_i-1] if st.q_i else 0} ‚≠ê")
        states.pop(uid, None)

@router.callback_query(F.data == "mil_50")
async def hint_50(cb: types.CallbackQuery):
    uid = cb.from_user.id
    st = states.get(uid)
    if not st or st.used_50:
        await cb.answer("50/50 —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
        return
    stars = await get_stars(uid)
    if stars < 5:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê (–Ω—É–∂–Ω–æ 5)")
        return
    await add_stars(uid, -5)
    st.used_50 = True
    # —É–¥–∞–ª–∏–º 2 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    await cb.answer("50/50 –ø—Ä–∏–º–µ–Ω—ë–Ω")

async def ask_question(cb: types.CallbackQuery):
    st = states[cb.from_user.id]
    q = random.choice(QUESTIONS)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=a, callback_data=f"mil_{i}_{q['correct']}")] for i, a in enumerate(q["answers"])
    ] + [[InlineKeyboardButton(text="üí° 50/50 (5 ‚≠ê)", callback_data="mil_50")]])
    await cb.message.answer(f"üí∞ –í–æ–ø—Ä–æ—Å {st.q_i + 1} –Ω–∞ {PRIZES[st.q_i]} ‚≠ê:\n{q['question']}", reply_markup=kb)